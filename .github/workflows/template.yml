name: Creating release branch

on:
  workflow_call:
    inputs:
      NAME:
        required: true
        type: string
      PRODUCT:
        required: true
        type: string

jobs:

  build:

    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v4

    - name: Check CDN and latest release versions
      id: check
      run: |
        product=${{ inputs.NAME }}
        latest_branch="release/${product}_latest"
        latest_build=$(curl -s "http://us.patch.battle.net:1119/${{ inputs.PRODUCT }}/versions" | awk -F '|' '$1 == "us" {print $6}')
        latest_build_number=$(echo ${latest_build} | awk -F '.' '{print $NF}')
        echo "CDN -> ${latest_build} (${latest_build_number})"
        latest_commit_build=$(curl -s "https://api.github.com/repos/${{ github.repository }}/commits/${latest_branch}" | grep -oP '(?<="message": ")[^"]*' | sed -E "s/${product} ([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)/\1/")
        latest_commit_build_number=$(echo ${latest_commit_build} | awk -F '.' '{print $NF}')
        echo "${latest_branch} -> ${latest_commit_build} (${latest_commit_build_number})"
        if [[ ! "${latest_build_number}" =~ ^[0-9]+$ ]]; then
          echo "Unable to extract build from CDN."
          echo "skip=true" >> $GITHUB_OUTPUT
        elif [[ ! "${latest_commit_build_number}" =~ ^[0-9]+$ ]]; then
          echo "Unable to extract build from ${latest_branch}."
          echo "skip=true" >> $GITHUB_OUTPUT
        elif [[ "${latest_commit_build_number}" -ge "${latest_build_number}" ]]; then
          echo "${latest_branch} is already up-to-date."
          echo "skip=true" >> $GITHUB_OUTPUT
        fi

    - name: Setup Lua and LuaRocks
      if: ${{ steps.check.outputs.skip != 'true' }}
      uses: ljmf00/setup-lua@v1.0.0
      with:
        lua-version: '5.1.5'
        install-luarocks: true

    - name: Setup lua-zip
      if: ${{ steps.check.outputs.skip != 'true' }}
      run: |
        sudo apt-get install libzip-dev
        luarocks install --server=http://luarocks.org/dev lua-zip

    - name: Setup wowcig
      if: ${{ steps.check.outputs.skip != 'true' }}
      run: luarocks install wowcig

    - name: Run wowcig on ${{ inputs.NAME }}
      if: ${{ steps.check.outputs.skip != 'true' }}
      run: wowcig --db2 all --skip-framexml --product ${{ inputs.PRODUCT }}

    - name: Setup .NET 7
      if: ${{ steps.check.outputs.skip != 'true' }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 7.0.x

    - name: Download latest DBC2CSV release
      if: ${{ steps.check.outputs.skip != 'true' }}
      uses: robinraju/release-downloader@v1.10
      with:
        repository: 'Marlamin/DBC2CSV'
        latest: true
        fileName: '.*linux.*'

    - name: Extract latest DBC2CSV release
      if: ${{ steps.check.outputs.skip != 'true' }}
      run: |
        unzip -q *.zip
        chmod +x DBC2CSV

    - name: Download latest hotfixes
      if: ${{ steps.check.outputs.skip != 'true' }}
      run: |
        echo "Not yet implemented."

    - name: Run DBC2CSV
      if: ${{ steps.check.outputs.skip != 'true' }}
      working-directory: extracts/${{ inputs.PRODUCT }}/db2
      run: |
        ../../../DBC2CSV .
        find . -type f ! -iname "*.csv" -delete

    - name: Create branch for release
      if: ${{ steps.check.outputs.skip != 'true' }}
      run: |
        set -euo pipefail
        cd extracts
        product=${{ inputs.NAME }}
        folder=${{ inputs.PRODUCT }}
        build=$(basename $(readlink -f "${folder}"))
        message="${product} ${build}"
        tag="${product}_${build}"
        cd "${folder}/db2"
        tmpzip="/tmp/${build}.zip"
        if ! zip -q "${tmpzip}" *.csv; then
          echo "Failed to create zip file" >&2
          exit 1
        fi
        cd ../../../
        git config user.name "GitHub Actions"
        git config user.email noreply@github.com
        cleanup() {
          find . -maxdepth 1 -mindepth 1 ! -name .git -exec rm -rf {} +
        }
        checkout_branch() {
          local branch_name=$1
          git fetch --prune origin
          if git show-ref --quiet "refs/remotes/origin/${branch_name}"; then
            echo "Re-using existing branch..."
            git fetch origin "${branch_name}"
            git checkout -b "${branch_name}" "origin/${branch_name}"
            git pull --rebase origin "${branch_name}"
            git rm -rfq .
            cleanup
          else
            echo "Creating new branch..."
            cleanup
            git rm -rfq .
            git checkout --orphan "${branch_name}"
            git commit --allow-empty --message "Initialize"
            git push --set-upstream origin "${branch_name}"
          fi
        }
        latest_branch="release/${product}_latest"
        checkout_branch "${latest_branch}"
        echo "Extract the ZIP then queue the files..."
        unzip -q "${tmpzip}"
        git add -v .
        echo "Checking if there are changes to be commited and pushed..."
        if [[ -n $(git status --porcelain) ]] || ! git diff --quiet; then
          if git commit --message "${message}" >/dev/null 2>&1; then
            echo "Commiting, tagging and pushing..."
            git tag "${tag}"
            git push --force-with-lease --set-upstream origin "${latest_branch}" --tags
          else
            echo "Unable to commit."
          fi
        else
          echo "Nothing to commit."
        fi
        echo "Done!"
