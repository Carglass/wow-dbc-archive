name: Create release branch for wow_classic

on:
  workflow_dispatch:
  schedule:
    - cron: '00 09 * * *'

jobs:

  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup Lua and LuaRocks
      uses: ljmf00/setup-lua@v1.0.0
      with:
        lua-version: '5.1.5'
        install-luarocks: true

    - name: Setup lua-zip
      run: |
        sudo apt-get install libzip-dev
        luarocks install --server=http://luarocks.org/dev lua-zip

    - name: Setup wowcig
      run: luarocks install wowcig

    - name: Run wowcig on wow_classic
      run: wowcig --db2 all --skip-framexml --product wow_classic

    - name: Setup .NET 7
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x

    - name: Download latest DBC2CSV release
      uses: robinraju/release-downloader@v1.7
      with:
        repository: 'Marlamin/DBC2CSV'
        latest: true
        fileName: '.*linux.*'

    - name: Extract latest DBC2CSV release
      run: |
        unzip *.zip
        chmod +x DBC2CSV

    - name: Run DBC2CSV
      working-directory: extracts/wow_classic/db2
      run: |
        ../../../DBC2CSV .
        find . -type f ! -iname "*.csv" -delete

    - name: Create branch for release
      run: |
        set -euo pipefail
        cd extracts
        product=wow_classic
        folder=$product
        build=$(basename $(readlink -f "${folder}"))
        message="${product} ${build}"
        tag="${product}_${build}"
        branch="release/${product}_${build}"
        cd "${folder}/db2"
        tmpzip="/tmp/${build}.zip"
        if ! zip "${tmpzip}" *.csv; then
          echo "Failed to create zip file" >&2
          exit 1
        fi
        cd ../../../
        git config user.name "GitHub Actions"
        git config user.email noreply@github.com
        cleanup() {
          find . -maxdepth 1 -mindepth 1 ! -name .git -exec rm -rf {} +
        }
        checkout_branch() {
          local branch_name=$1
          if git rev-parse --verify "${branch_name}" >/dev/null 2>&1; then
            git checkout "${branch_name}"
            git fetch origin "${branch_name}"
            git pull --rebase origin "${branch_name}"
          else
            git checkout --orphan "${branch_name}"
            cleanup
            git commit --allow-empty --message "${message}"
            git push --set-upstream origin "${branch_name}"
          fi
        }
        unzip_release() {
          cleanup
          unzip "${tmpzip}"
        }
        latest_branch="release/${product}_latest"
        checkout_branch "${latest_branch}"
        unzip_release
        if ! git diff --quiet; then
          git add .
          if git commit --message "${message}" >/dev/null 2>&1; then
            git tag "${tag}"
            git push --force-with-lease --set-upstream origin "${latest_branch}" --tags
          fi
        fi
